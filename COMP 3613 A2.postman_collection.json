{
	"info": {
		"_postman_id": "bdb7f664-b580-408a-9262-20074588f3bf",
		"name": "COMP 3613 A2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34853563"
	},
	"item": [
		{
			"name": "Initialize Database",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains 'db initialized!'\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"db initialized!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/init",
					"host": [
						"{{host}}"
					],
					"path": [
						"init"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Staff",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Access token returned for staff\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
							"    pm.environment.set('access_token_staff', jsonData['access_token']) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"password\": \"pass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Get Employers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/employers",
					"host": [
						"{{host}}"
					],
					"path": [
						"employers"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Get Students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/students",
					"host": [
						"{{host}}"
					],
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Create Employer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Employer created test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.message).to.match(/^Employer\\s+\"?.+?\"?\\s+created\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Torgue\",\r\n    \"password\": \"pass\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/employer",
					"host": [
						"{{host}}"
					],
					"path": [
						"employer"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Student created test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.message).to.match(/^Student\\s+\"?.+?\"?\\s+created\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Mikisumresh\",\r\n    \"password\": \"pass\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/student",
					"host": [
						"{{host}}"
					],
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User updated message\" , function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^User with ID\\s+.+\\s+updated\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Dob\",\r\n    \"password\" : \"dobpass123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/6",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User deleted message\" , function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^User with ID\\s+.+\\s+deleted\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/5",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Create Shortlist Position",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Shortlist position created test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.message).to.match(/^Student\\s+ID\\s+\\d+\\s+shortlisted\\s+for\\s+Internship\\s+ID\\s+\\d+\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"student_id\": \"7\",\r\n    \"internship_id\": \"2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/shortlist",
					"host": [
						"{{host}}"
					],
					"path": [
						"shortlist"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Delete Shortlist Position",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Shortlist position deleted test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.message).to.match(/^Shortlist\\s+entry\\s+with\\s+ID\\s+\\d+\\s+deleted\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/shortlist/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"shortlist",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Employer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Access token returned for employer\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
							"    pm.environment.set('access_token_employer', jsonData['access_token']) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Vault-Tec\",\r\n    \"password\": \"pass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Employer) Create Internship",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Internship created test\", function () {\r",
							"\tlet jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^Internship\\s+\"?.+?\"?\\s+created\\s+by\\s+.+\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"bomboclaat up the place\",\r\n    \"description\": \"bloodclaat\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/internship",
					"host": [
						"{{host}}"
					],
					"path": [
						"internship"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Employer) Get Employer Internships",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"emplypyer_id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"id\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\":{\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid for Internships', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/internships",
					"host": [
						"{{host}}"
					],
					"path": [
						"internships"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Employer Update Internship",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Internship updated message\" , function () {\r",
							"    let jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.message).to.match(/^Internship\\s+with\\s+title\\s+\"?.+?\"?\\s+updated\\.$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"bomboclaat up the place 2\",\r\n    \"description\": \"bloodclaat\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/internship/3",
					"host": [
						"{{host}}"
					],
					"path": [
						"internship",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Employer) Delete Internship",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Internship updated message\" , function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^Internship\\s+with\\s+ID\\s+\\d+\\s+deleted\\.$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/internship/3",
					"host": [
						"{{host}}"
					],
					"path": [
						"internship",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Employer) Get Internship Shortlist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"shortlist_id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"status\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"student\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"      },\r",
							"      \"required\": [\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid for Shortlist for Internship', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/shortlist/internship/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"shortlist",
						"internship",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Employer) Update Shortlist Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Internship updated message\" , function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^Shortlist\\s+entry\\s+with\\s+ID\\s+\\d+\\s+updated\\s+to\\s+status\\s+\\w+\\.$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"ACcEPTED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/shortlist/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"shortlist",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Access token returned for student\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
							"    pm.environment.set('access_token_student', jsonData['access_token']) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Diaz\",\r\n    \"password\": \"pass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Student) Get Student's Shortlist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"employer\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"internship\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"shortlist_id\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"status\":{\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid for Shortlist for student', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/shortlist/student/7",
					"host": [
						"{{host}}"
					],
					"path": [
						"shortlist",
						"student",
						"7"
					]
				}
			},
			"response": []
		}
	]
}